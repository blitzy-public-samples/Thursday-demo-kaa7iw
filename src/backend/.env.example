# Human Tasks:
# 1. Copy this file to .env and replace example values with actual configuration
# 2. Generate strong secret keys for JWT and application security
# 3. Set up PostgreSQL database with appropriate credentials
# 4. Configure Redis instance with proper connection limits
# 5. Create Google OAuth project and obtain credentials
# 6. Configure CORS origins based on frontend deployment URLs
# 7. Review and adjust rate limits for production use
# 8. Set appropriate logging level for each environment

# Application Security Configuration
# Requirement: Security Configuration - Secret key for Flask application
SECRET_KEY=your-super-secret-key-here

# JWT Configuration
# Requirement: Security Configuration - JWT token generation and validation
JWT_SECRET_KEY=your-jwt-secret-key
JWT_ACCESS_TOKEN_EXPIRES=3600

# Database Configuration
# Requirement: Database Configuration - PostgreSQL connection settings
DATABASE_URL=postgresql://user:password@localhost:5432/dbname
DATABASE_POOL_SIZE=5
DATABASE_MAX_OVERFLOW=10

# Redis Cache Configuration
# Requirement: Cache Configuration - Redis connection settings
REDIS_URL=redis://localhost:6379/0
REDIS_MAX_CONNECTIONS=10

# Google OAuth Configuration
# Requirement: Security Configuration - Google OAuth credentials
GOOGLE_CLIENT_ID=your-google-client-id
GOOGLE_CLIENT_SECRET=your-google-client-secret

# API Rate Limiting
# Requirement: Security Configuration - API request rate limiting
RATE_LIMIT_DEFAULT=100

# Logging Configuration
# Requirement: Environment Configuration - Application logging
LOG_LEVEL=INFO

# CORS Configuration
# Requirement: Security Configuration - CORS policy
CORS_ORIGINS=http://localhost:3000,https://example.com

# Test Database Configuration (for running tests)
TEST_DATABASE_URL=postgresql://test:test@localhost:5432/test_db