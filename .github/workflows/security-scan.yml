# Human Tasks:
# 1. Configure SNYK_TOKEN secret in GitHub repository settings
# 2. Review and adjust security scan thresholds if needed
# 3. Configure security team notification settings
# 4. Set up GitHub issue creation automation
# 5. Review CodeQL configuration for language-specific settings

# Requirement: Security Compliance - Implements automated security scanning workflow
name: Security Scan

# Requirement: Security Monitoring - Configures automated scan triggers
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC

# Requirement: Security Compliance - Sets up secure environment
env:
  PYTHON_VERSION: '3.9'
  DOCKER_IMAGE: backend-app

# Requirement: Security Monitoring - Implements comprehensive security scanning jobs
jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    environment: security-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r src/backend/requirements.txt

      # Requirement: Data Security - Scans dependencies for vulnerabilities
      - name: Run Snyk vulnerability scan
        uses: snyk/actions/python@v1
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --severity-threshold=high

      - name: Upload dependency scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: snyk_report.json
          retention-days: 30

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: dependency-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Requirement: Data Security - Builds and scans container image
      - name: Build container image
        run: |
          docker build -t ${{ env.DOCKER_IMAGE }} -f src/backend/docker/Dockerfile .

      # Requirement: Security Compliance - Scans container for vulnerabilities
      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image-ref: ${{ env.DOCKER_IMAGE }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Upload container scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-results
          path: trivy-results.json
          retention-days: 30

  code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: container-scan
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Requirement: Security Monitoring - Performs static code analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
          queries: security-and-quality

      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:python"

      - name: Upload analysis results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codeql-results
          path: results
          retention-days: 30

  # Requirement: Security Compliance - Implements failure handling and notifications
  notify-failures:
    name: Handle Security Scan Failures
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, code-analysis]
    if: failure()

    steps:
      - name: Create GitHub issue
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Security Scan Failure',
              body: 'Security scan workflow failed. Please review the scan results.',
              labels: ['security', 'high-priority']
            })

      # Requirement: Security Monitoring - Implements security alerts
      - name: Send security team alert
        run: |
          echo "Security scan failure detected"
          # Add your security team notification logic here
          # Example: Webhook, email, or other notification system

  # Requirement: Data Security - Enforces security thresholds
  security-gates:
    name: Security Threshold Check
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, code-analysis]
    if: always()

    steps:
      - name: Check security thresholds
        run: |
          if [[ "${{ needs.dependency-scan.result }}" == "failure" || \
                "${{ needs.container-scan.result }}" == "failure" || \
                "${{ needs.code-analysis.result }}" == "failure" ]]; then
            echo "Security scan failed: Threshold exceeded"
            exit 1
          fi