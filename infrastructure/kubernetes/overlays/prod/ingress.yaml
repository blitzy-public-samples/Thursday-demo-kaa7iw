# Human Tasks:
# 1. Ensure the static IP 'code-generation-app-ip' is reserved in GCP
# 2. Verify the managed certificate 'code-generation-app-cert' is provisioned
# 3. Confirm the frontend config 'code-generation-app-frontend-config' exists
# 4. Validate DNS records are configured for the application domain

# Kubernetes v1.24+ Ingress configuration for production environment
# Addresses requirements:
# - Load Balancing (7. System Architecture/7.1 High-Level Architecture): Implements global load balancing with SSL termination
# - Security Architecture (10.2 Data Security/10.2.1 Data Classification): Enforces HTTPS and secure routing
# - Production Environment (11.1 Deployment Environment/11.1.1 Environment Architecture): Production-grade ingress setup

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: code-generation-app
  namespace: code-generation-app
  labels:
    app: code-generation-app
    environment: production
    managed-by: kustomize
  annotations:
    # GCP Load Balancer configuration
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "code-generation-app-ip"
    networking.gke.io/managed-certificates: "code-generation-app-cert"
    networking.gke.io/v1beta1.FrontendConfig: "code-generation-app-frontend-config"
    
    # Security configurations
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    
    # CORS configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
    
    # Backend configuration
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "60"
    
    # Health check configuration
    nginx.ingress.kubernetes.io/healthcheck-path: "/health"
    nginx.ingress.kubernetes.io/healthcheck-port: "80"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/limit-rps: "100"
    nginx.ingress.kubernetes.io/limit-connections: "50"

spec:
  rules:
    - http:
        paths:
          - path: /*
            pathType: ImplementationSpecific
            backend:
              service:
                name: code-generation-app
                port:
                  number: 80

  # Default backend for handling errors
  defaultBackend:
    service:
      name: code-generation-app
      port:
        number: 80

  # TLS configuration is handled by GCP managed certificates
  tls: []